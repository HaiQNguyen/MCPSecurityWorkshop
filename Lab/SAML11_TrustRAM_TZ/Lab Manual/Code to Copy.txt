
//TODO 1 - Secure functions header
/**
 *  @brief Initialize the RTC	
 *	
 *	@return	NULL	always return
 *
 *	It is including the tamper detection setup
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void sc_RTC_Init(void);

/**
 *  @brief Write data to the Trust RAM
 *
 *	@param	data	pointer to byte array written to RAM
 *	@param	size	number of byte written
 *	@param	offset	where to write data in RAM, starting from 0x00
 *	
 *	@return	NULL	always return
 *
 *	Maximum 128 bytes can be written into RAM since we are using silent mode
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void sc_TRAM_Write(uint8_t * data, uint8_t size, uint8_t offset);

/**
 *  @brief Read Data from Trust RAM
 *
 *	@param	ptr		buffer to store data read from RAM
 *	@param	size	number of byte to read
 *	@param	offset	where to read byte, starting from 0x00	
 *	
 *	@return	NULL	always return
 *
 *	Maximum 128 bytes can be read from RAM since it is running silent mode
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void sc_TRAM_Read(uint8_t * data, uint8_t size, uint8_t offset);

/**
 *  @brief Init  Trust RAM
 *
 *	@return	NULL	always return
 *
 *	the initialization includes silent mode, tamper detection
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void sc_TRAM_Init(void);

/**
 *  @brief Print text in secure mode
 *
 *	@param	string	Text to be printed	
 *	
 *	@return	NULL	always return
 *
 *	Text in secure mode will be printed in green
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void sc_ConsolePuts (uint8_t * string);

/**
 *  @brief Print text in non secure mode
 *
 *	@param	string	Text to be printed	
 *	
 *	@return	NULL	always return
 *
 *	Text in non secure mode will be printed in red
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void nsc_ConsolePuts (uint8_t * string);

/**
 *  @brief Print a bytes on the console terminal in non secure mode
 *
 *	@param	ptr		pointer to byte array to print
 *	@param	length	number of byte to print	
 *	
 *	@return	NULL	always return
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void nsc_PrintBytes(uint8_t * ptr, uint8_t length);

/**
 *  @brief Get serial number and revision from Trust RAM
 *
 *	@param	serial_buff		buffer storing serial number
 *	@param	serial_size		size of serial number
 *	@param	rev_buff		buffer storing revision
 *	@param	rev_size		size of revision
 *	
 *	@return	NULL	always return
 *
 *	This function allows non-secure application to read out the serial number\n
 *	and revision from Trust RAM
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */ 
void nsc_GetRevSerialNumber(uint8_t *serial_buff, uint8_t serial_size, uint8_t * rev_buff, uint8_t rev_size); 

/**
 *  @brief	Read out complete data in Trust RAM
 *
 *	@param	ptr		buffer storing data from RAM
 *	@param	size	size of RAM (128 bytes)
 *	
 *	@return	NULL	always return
 *
 *	It allows non-secure application accesses the data in trust RAM
 *	
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
void sc_ReadWholeRAM(u_int8_t *buff, uint8_t size);









//TODO 2 - Secure functions body
void sc_RTC_Init(void)
{
	/* Configure PA08 as RTC IN0 (peripheral I) */
	PORT_SEC->Group[0].WRCONFIG.reg = (uint32_t)(PORT_WRCONFIG_WRPINCFG|PORT_WRCONFIG_WRPMUX|PORT_WRCONFIG_PINMASK(1<<8)|PORT_WRCONFIG_PMUXEN|PORT_WRCONFIG_PMUX(8));
	
	/* Set APB Clock */
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;
	
	/* Select RTC clock on XOSC32K */
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_ULP1K;
	
	/* Reset RTC */
	RTC->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_SWRST;
	while(RTC->MODE0.SYNCBUSY.bit.SWRST);
	
	RTC->MODE0.CTRLA.reg = (RTC_MODE0_CTRLA_MODE_COUNT32 | RTC_MODE0_CTRLA_PRESCALER_DIV1 | RTC_MODE0_CTRLA_COUNTSYNC);
	
	/*Configure RTC Tamper on IN0 */
	RTC->MODE0.TAMPCTRL.reg = ( RTC_TAMPCTRL_IN0ACT_WAKE | 	// Tamper action : Wake and set Tamper flag
	RTC_TAMPCTRL_TAMLVL0 |		// Tamper edge : rising
	RTC_TAMPCTRL_DEBNC0	 		// Tamper Debounce  :Detect edge with synchronous stability
	);
	
	/* Enable Tamper event output*/
	RTC->MODE0.EVCTRL.reg = (RTC_MODE0_EVCTRL_TAMPEREO | RTC_MODE0_EVCTRL_OVFEO);
	
	/* Enable RTC */
	RTC->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
	while(RTC->MODE0.SYNCBUSY.bit.ENABLE);
}

void sc_TRAM_Init(void)
{
	/* Enable TRAM in Tamper mode */
	TRAM->CTRLA.reg = TRAM_CTRLA_SWRST;
	while (TRAM->SYNCBUSY.bit.SWRST);
	/* Enable Data Scrambling with internal key */
	TRAM->DSCC.reg = (TRAM_DSCC_DSCEN |TRAM_DSCC_DSCKEY(0xCAFE));
	/* Enable TRAM security features (TAMPER , data remanence prevention , silent access*/
	TRAM->CTRLA.reg = (TRAM_CTRLA_TAMPERS|TRAM_CTRLA_SILACC|TRAM_CTRLA_DRP);
	TRAM->CTRLA.reg |= TRAM_CTRLA_ENABLE ;
}

void sc_TRAM_Write(uint8_t * data, uint8_t size, uint8_t offset)
{
	uint8_t i;
	uint8_t *addr_b;
	addr_b = (uint8_t*)&TRAM->RAM[0].reg;
	
	/*return if data bigger than RAM size*/
	if(size > 128)
		return;
	
	/* Initialize TRAM content */
	for (i=0; i < size ; i++) {
		*(addr_b + offset + i) = data[i];
	}
	
}

void sc_TRAM_Read(uint8_t * data, uint8_t size, uint8_t offset)
{
	int i;
	uint8_t *addr_b;
	addr_b = (uint8_t*)&TRAM->RAM[0].reg;
	
	/*Stop operation if size bigger than TRAM size*/
	if(size + offset > 128)
		return;
	
	for (i=0; i < size; i++)
	{
		data[i] = *(addr_b + offset + i);
	}
}

void sc_ReadWholeRAM(u_int8_t *buff, uint8_t size)
{
	if(size != 128)
		return;
		
	sc_TRAM_Read(buff, 128, 0);
}

void sc_ConsolePuts (uint8_t * string)
{
	/* Set display foreground color to green */
	printf("\033[0;32m");
	/* Print string on console */
	printf("%s", string);
}

void nsc_ConsolePuts (uint8_t * string)
{
	/* Set display foreground color to red */
	printf("\033[0;31m");
	/* Print string on console */
	printf("%s", string);
}

void nsc_PrintBytes(uint8_t * ptr, uint8_t length)
{
	uint8_t i = 0;
	uint8_t line_count = 0;
	
	/* Set display foreground color to red */
	printf("\033[0;31m");
	
	for(;i < length; i++) {
		printf("0x%02x, ",ptr[i]);
		line_count++;
		if(line_count == 8) {
			printf("\r\n");
			line_count = 0;
		}
	}
		
	printf("\r\n");
}

void nsc_GetRevSerialNumber(uint8_t *serial_buff, uint8_t serial_size, uint8_t * rev_buff, uint8_t rev_size)
{
	/*Make sure to have correct size*/
	if(serial_size != 9 || rev_size != 4)
		return;
		
	sc_TRAM_Read(serial_buff, serial_size, 0x00 );
	sc_TRAM_Read(rev_buff, rev_size, 0x00 + serial_size );

}







//TODO 3 - Veneer table header

/**
 *  @brief Print text in non secure mode
 *
 *	@param	string	Text to be printed	
 *	
 *	@return	NULL	always return
 *
 *	Text in non secure mode will be printed in red
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
extern void nonsecure_ConsolePuts (uint8_t * string);

/**
 *  @brief Print a bytes on the console terminal in non secure mode
 *
 *	@param	ptr		pointer to byte array to print
 *	@param	length	number of byte to print	
 *	
 *	@return	NULL	always return
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
extern void nonsecure_PrintBytes(uint8_t * ptr, uint8_t length);

/**
 *  @brief Get serial number and revision from Trust RAM
 *
 *	@param	serial_buff		buffer storing serial number
 *	@param	serial_size		size of serial number
 *	@param	rev_buff		buffer storing revision
 *	@param	rev_size		size of revision
 *	
 *	@return	NULL	always return
 *
 *	This function allows non-secure application to read out the serial number\n
 *	and revision from Trust RAM
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */ 
extern void nonsecure_GetRevSerialNumber(uint8_t *serial_buff, uint8_t serial_size, uint8_t * rev_buff, uint8_t rev_size);

/**
 *  @brief	Read out complete data in Trust RAM
 *
 *	@param	ptr		buffer storing data from RAM
 *	@param	size	size of RAM (128 bytes)
 *	
 *	@return	NULL	always return
 *
 *	It allows non-secure application accesses the data in trust RAM
 *	
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
extern void nonsecure_ReadWholeRAM(uint8_t *buff, uint8_t size);








//TODO 4 - Veneer table function body
void __attribute__((cmse_nonsecure_entry)) nonsecure_ConsolePuts (uint8_t * string)
{
	nsc_ConsolePuts (string);
}
void __attribute__((cmse_nonsecure_entry)) nonsecure_PrintBytes(uint8_t * ptr, uint8_t length)
{
	nsc_PrintBytes(ptr, length);
}

void __attribute__((cmse_nonsecure_entry)) nonsecure_GetRevSerialNumber(uint8_t *serial_buff, uint8_t serial_size, uint8_t * rev_buff, uint8_t rev_size)
{
	nsc_GetRevSerialNumber(serial_buff, serial_size, rev_buff, rev_size);
}

void __attribute__((cmse_nonsecure_entry)) nonsecure_ReadWholeRAM(u_int8_t *buff, uint8_t size)
{
	sc_ReadWholeRAM(buff, size);
}








//TODO 5 - Secure app, define section, local variable and function prototype

/* TZ_START_NS: Start address of non-secure application */
#define TZ_START_NS			0x00008000
#define DATA_OFFSET_IN_RAM	0x00
#define REVISION_SIZE		0x04
#define TRUST_RAM_SIZE		128

/* Handle the response status from the secure element*/
#define CHECK_STATUS(s)										\
if(s != ATCA_SUCCESS) {										\
	printf("status code: 0x%x\r\n", s);						\
	printf("Error: Line %d in %s\r\n", __LINE__, __FILE__); \
	while(1);												\
}


/* Local variable section -----------------------------------------------------------------*/

/* typedef for non-secure callback functions */
typedef void (*ns_funcptr_void) (void) __attribute__((cmse_nonsecure_call));

/**	
 *	@brief data structure for secure element instant
 *	
 *	It contains the information to initialize the communication between controller and secure element
 */
ATCAIfaceCfg cfg_ateccx08a_i2c_host = {
	.iface_type				= ATCA_I2C_IFACE,
	.devtype				= ATECC608A,
	.atcai2c.slave_address	= 0xC0,
	.atcai2c.bus			= 1,
	.atcai2c.baud			= 400000,
	.wake_delay				= 800,
	.rx_retries				= 20,
	.cfg_data              = &I2C_0
};

/* Local function prototype section --------------------------------------------------------*/

/**
 *  @brief Print a bytes on the console terminal
 *
 *	@param	ptr		pointer to byte array to print
 *	@param	size	number of byte to print	
 *	
 *	@return	NULL	always return
 *
 *	@date	29.05.2019 - initial 
 *
 *  @bug No known bugs.
 */
static void print_bytes(uint8_t * ptr, uint8_t length);









//TODO 6 – Secure app, variable initialize
volatile ATCA_STATUS status;
uint8_t serial_number[ATCA_SERIAL_NUM_SIZE];
uint8_t revision_number[REVISION_SIZE];
uint8_t ram_buff[TRUST_RAM_SIZE];

/* Pointer to Non secure reset handler definition*/
ns_funcptr_void NonSecure_ResetHandler; 








//TODO 7 – Secure app, init TrustRAM, ATECC508, write data to TrustRAM
sc_ConsolePuts((uint8_t *)"hello world from secure application\r\n");
	
/*Initial TrustRAM and display its content*/
sc_RTC_Init();
sc_TRAM_Init();
sc_ReadWholeRAM(ram_buff, TRUST_RAM_SIZE);
print_bytes(ram_buff,TRUST_RAM_SIZE);

/*Intial ATECC508, read out revision number, serial number and write them to TrustRAM*/
status = atcab_init( &cfg_ateccx08a_i2c_host );
CHECK_STATUS(status);

sc_ConsolePuts((uint8_t *)"Initializing ATECC508\r\n");

status = atcab_read_serial_number((uint8_t*)&serial_number);
CHECK_STATUS(status);
status = atcab_info(revision_number);
CHECK_STATUS(status);

sc_TRAM_Write(serial_number, ATCA_SERIAL_NUM_SIZE, DATA_OFFSET_IN_RAM);
sc_TRAM_Write(revision_number, REVISION_SIZE, DATA_OFFSET_IN_RAM + ATCA_SERIAL_NUM_SIZE);

sc_ConsolePuts((uint8_t *)"ATECC508 is initialized. Revision and serial number are stored in Trust Ram\r\n");



//TODO 8 – Secure app, start non-secure application
/* Set non-secure main stack (MSP_NS) */
__TZ_set_MSP_NS(*((uint32_t *)(TZ_START_NS)));

/* Get non-secure reset handler */
NonSecure_ResetHandler = (ns_funcptr_void)(*((uint32_t *)((TZ_START_NS) + 4U)));

/* Start Non-secure Application */
NonSecure_ResetHandler();









//TODO 9 – Secure app, function body
static void print_bytes(uint8_t * ptr, uint8_t length)
{
	
	uint8_t i = 0;
	uint8_t line_count = 0;
	for(;i < length; i++) {
		printf("0x%02x, ",ptr[i]);
		line_count++;
		if(line_count == 8) {
			printf("\r\n");
			line_count = 0;
		}
	}
	
	printf("\r\n");
}







//TODO 10 – Non-secure app, variable initialize
#define SERIAL_NUM_SIZE		0x09
#define REVISION_SIZE		0x04
#define TRUST_RAM_SIZE		128

uint8_t rev[REVISION_SIZE];
uint8_t ser[SERIAL_NUM_SIZE];
uint8_t ram_buff[TRUST_RAM_SIZE];





//TODO 11 – Non-secure app
nonsecure_ConsolePuts((uint8_t *)"Hello World from non secure application\r\n");


/* Replace with your application code */
while (1) {
	
	/*Waiting for user input to read the data from Trust RAM*/
	nonsecure_ConsolePuts((uint8_t *)"\r\n\r\n");
	nonsecure_ConsolePuts((uint8_t *)"Press SW0 to call and print serial number and revision\r\n");
	while(gpio_get_pin_level(SW0));
	
	/* Read data from Trust RAM and print on Terminal*/
	nonsecure_ReadWholeRAM(ram_buff, TRUST_RAM_SIZE);
	nonsecure_ConsolePuts((uint8_t *)"Data in RAM after initialization\r\n");
	nonsecure_PrintBytes(ram_buff, TRUST_RAM_SIZE);
	
	nonsecure_GetRevSerialNumber(ser, SERIAL_NUM_SIZE, rev, REVISION_SIZE);
	
	nonsecure_ConsolePuts((uint8_t *)"Serial number: \r\n");
	nonsecure_PrintBytes(ser, SERIAL_NUM_SIZE);
	nonsecure_ConsolePuts((uint8_t *)"Revision number: \r\n");
	nonsecure_PrintBytes(rev, REVISION_SIZE);
	
	delay_ms(500);
}



	